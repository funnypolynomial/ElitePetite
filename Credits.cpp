#include <Arduino.h>
#include "Elite.h"
#include "Text.h"
#include "Loader.h"
#include "Credits.h"

namespace credits {
// Despite what https://www.bbcelite.com/electron/loader/subroutine/squa2.html says, this is a *signed* 8-bit multiply
#define SQUA2(_a)   (unsigned short)(((char)_a)*((char)_a))         // square
#define ROOT(_a)    ((byte)loader::Sqrt(_a))                        // square root

static void Pixel(byte x, byte y)
{
  // set a single white pixel if on-screen
  if (y < SCREEN_HEIGHT)
  {
    LCD_BEGIN_FILL(SCREEN_OFFSET_X + x, SCREEN_OFFSET_Y + y, 1, 1);
    LCD_ONE_WHITE();
  }
}

byte DORND()
{
  //  this original version just seems too sparse!
// https://www.bbcelite.com/electron/all/loader.html#header-dornd
//  static byte RAND[4] = {0x6C, 0x78, 0x53, 0x49}; // 0x6C785349;
//  byte X = RAND[1];
//  RAND[1] += RAND[3];
//  RAND[3] = X;
//  X = RAND[0];
//  RAND[0] += RAND[2];
//  RAND[2] = X;
//  return RAND[0];

  return random(256);
}

// These three methods are based on reversing the ASM routines, see https://www.bbcelite.com/deep_dives/drawing_saturn_on_the_loading_screen.html
static void Planet()
{
  // draw the planet body, half in shadow
  for (int cnt = 0; cnt < 1280; cnt++)
  {
    byte r1 = DORND();
    byte r2 = DORND();
    short int ZP = 0x4000 - (SQUA2(r1) + SQUA2(r2));
    if (ZP > 0)
    {
      // squash r2
      r2 >>= 1;
      if (!(r2 & 0x40))
        r2 |= 0x80;
      //Not sure why I need the 128 +
      Pixel(128 + (ROOT(ZP) >> 1), r2);
    }
  }
}

static void Stars()
{
  // draw the stars around the planet
  for (int cnt = 0; cnt < 477; cnt++)
  {
    byte x = DORND();
    byte y = DORND();
    if (((SQUA2(x) + SQUA2(y)) >> 8) >= 17)
      Pixel(128 + (char)x, 128 + (char)y);
  }
}

static void Rings()
{
  // draw the planet rings
  for (int cnt = 0; cnt < 1280 ; cnt++)
  {
    byte r5 = DORND();
    byte r6 = DORND();
    byte r7 = r5;
    if (r7 & 0x80)
      r7 = (r7 >> 2) | 0xC0;
    else
      r7 >>= 2;
    unsigned short ZP = (SQUA2(r5) + SQUA2(r6) + SQUA2(r7)) >> 8;
    if (32 <= ZP && ZP <= 79)
    {
      ZP = (SQUA2(r6) + SQUA2(r7)) >> 8;
      if (ZP > 16)
        Pixel(128 + (char)r6 + (char)r7, 128 + (char)r6);
      else if (ZP & 1 && ((char)r6 + (char)r7) < (char)r6)
        Pixel(128 + (char)r6 + (char)r7, 128 + (char)r6);
    }
  }
}


// These three data blocks are from the ASM files, 
// see https://www.bbcelite.com/electron/loader/subroutine/elite_loader_part_1_of_5.html & https://github.com/markmoxon/electron-elite-beebasm/tree/master/1-source-files/images 

// "Acornsoft"
static const byte acornsoftData[] PROGMEM =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xF8, 0xC3, 0x00, 0x00, 0x0F, 0x7C, 0xFF, 0x0F, 0x7C, 0xF0,
  0x00, 0x3F, 0x8F, 0x7C, 0xF1, 0x8F, 0x3F, 0x3F, 0x00, 0xC0, 0x8F, 0x7C, 0xF0, 0xC0, 0x1F, 0xF0,
  0x00, 0xFF, 0x9F, 0x00, 0x00, 0x03, 0x8F, 0x07, 0x00, 0x01, 0x1F, 0x7C, 0xF8, 0xE1, 0xC7, 0xFE,
  0x00, 0xFE, 0x1F, 0x7C, 0xF8, 0xF1, 0xE3, 0x07, 0x00, 0x1F, 0x3E, 0x7C, 0xFF, 0xFB, 0xF0, 0xE1,
  0x00, 0xFC, 0x3E, 0x7C, 0xF0, 0xE0, 0xF8, 0xF8, 0x00, 0x3E, 0x3E, 0x7F, 0x7F, 0x7C, 0x7C, 0xFC,
  0x00, 0x7C, 0x7C, 0xBE, 0xFE, 0xFE, 0x3E, 0x3F, 0x00, 0x3F, 0x7C, 0x3E, 0x0F, 0x00, 0x1F, 0x03,
  0x00, 0xE0, 0x7C, 0x00, 0xF8, 0x1F, 0x0F, 0xFF, 0x00, 0x7F, 0xF8, 0x3E, 0x1F, 0x8F, 0xC7, 0x00,
  0x00, 0x83, 0xF8, 0x3E, 0x1F, 0x87, 0xE3, 0x7F, 0x00, 0xFF, 0xF8, 0x3E, 0x0F, 0xC7, 0xF1, 0xE0,
  0x00, 0xCF, 0x00, 0x00, 0xFE, 0xE0, 0xF8, 0x7E, 0x00, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0x7C, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0x7E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// "ELITE"
static const byte eliteData[] PROGMEM =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3F, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xFF, 0xFF, 0xFF,
  0x00, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 0xFF,
  0x00, 0xFF, 0xE0, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE,
  0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x00, 0xE1, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0xC0, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0x00, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0x00, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0xFF, 0xC0, 0xE0, 0xF8, 0xFC, 0xFE, 0xFF, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x00, 0xFF, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F,
  0x00, 0xFF, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0xF0, 0xFF,
  0x00, 0xFC, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// "(C) Acornsoft 1984"
static const byte copyrightData[] PROGMEM =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x01, 0x0E, 0x38, 0xE0, 0xC3, 0x87,
  0x00, 0x38, 0xC3, 0x0E, 0x38, 0xE0, 0x9C, 0xE1, 0x00, 0x7C, 0xB8, 0x00, 0x03, 0x07, 0x38, 0xC0,
  0x00, 0x70, 0x70, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x1C, 0x39,
  0x00, 0x3F, 0xE7, 0xDE, 0xFD, 0x73, 0xE7, 0xC7, 0x00, 0x00, 0x00, 0x7E, 0xCE, 0x81, 0x39, 0xE1,
  0x00, 0x00, 0x00, 0x3F, 0xE7, 0xEE, 0xDE, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x70, 0xF0, 0xE0,
  0x00, 0x00, 0x00, 0x9F, 0x9D, 0x3D, 0x3D, 0x39, 0x00, 0x00, 0x00, 0xC7, 0xEE, 0xE7, 0xC0, 0xCF,
  0x00, 0x00, 0x00, 0xF3, 0x07, 0xE7, 0x73, 0xE1, 0x00, 0x00, 0x01, 0xF1, 0xB9, 0xBC, 0xBC, 0xF8,
  0x00, 0xF1, 0xC0, 0xE1, 0xF8, 0xF0, 0x70, 0x78, 0x00, 0xC0, 0xE0, 0xFC, 0x70, 0x38, 0x3C, 0x0F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x70, 0x7C, 0x0E, 0x07, 0x03, 0x01, 0x03,
  0x00, 0x7C, 0x77, 0x3D, 0x07, 0x80, 0xE0, 0xFC, 0x00, 0x7E, 0xBB, 0xDE, 0xF3, 0x39, 0x3C, 0x7C,
  0x00, 0x0E, 0x87, 0xE3, 0xF3, 0xDE, 0xF7, 0x1F, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFF, 0x83, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void Draw()
{
  // Draw the credits screen, see https://www.bbcelite.com/electron/loader/subroutine/elite_loader_part_3_of_5.html
  LCD_FILL_BYTE(LCD_BEGIN_FILL(SCREEN_OFFSET_X, SCREEN_OFFSET_Y, SCREEN_WIDTH, SCREEN_HEIGHT), 0x00);
  loader::DrawMonoBitImage(acornsoftData,  8,  8);
  loader::DrawMonoBitImage(eliteData,      24, 8);
  loader::DrawMonoBitImage(copyrightData,  SCREEN_HEIGHT - DIALS_HEIGHT - 16, 8);
  Planet();
  Stars();
  Rings();
}
}
